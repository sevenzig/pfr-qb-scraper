# NFL QB Scraper Development Rules for Cursor AI
# Modular rules system with specialized guidance for script-to-CLI migration

## PROJECT OVERVIEW
This project scrapes NFL quarterback data from Pro Football Reference and stores it in a PostgreSQL database using Supabase. Currently undergoing migration from scattered scripts to a unified CLI architecture.

## MODULAR RULES SYSTEM
This .cursorrules file now references specialized rule modules in `.cursor/rules/` for better organization and maintainability:

- **migration-guardrails.mdc** - Phase compliance and architecture requirements
- **scraping-requirements.mdc** - Mandatory scraping standards and rate limiting
- **code-quality-standards.mdc** - Type safety, error handling, documentation
- **performance-monitoring.mdc** - Performance baselines and monitoring standards
- **workflow-documentation.mdc** - Mermaid diagram and documentation requirements
- **security-standards.mdc** - Security and authentication requirements
- **anti-patterns.mdc** - Common mistakes and code smells to avoid

For detailed guidance on specific topics, reference the appropriate .mdc file in `.cursor/rules/`.

## QUICK REFERENCE - MIGRATION GUARDRAILS
*See `.cursor/rules/migration-guardrails.mdc` for complete details*

### Phase Compliance Rules
- NEVER skip migration phases - follow Foundation ‚Üí Core ‚Üí Data ‚Üí Polish sequence
- ALWAYS maintain backwards compatibility until Phase 4 deprecation
- NEVER break existing scripts during Phases 1-3

### Architecture Compliance
- ALL new code must go in proper module structure (src/cli/, src/core/, src/operations/)
- NEVER put business logic in CLI command handlers
- ALWAYS use dependency injection patterns for testability

## QUICK REFERENCE - CODE QUALITY STANDARDS
*See `.cursor/rules/code-quality-standards.mdc` for complete details*

### Type Safety Requirements
- ALL functions must have complete type hints (args, returns, variables)
- NEVER use 'any' type - use Union, Optional, or specific types
- NEVER skip type checking - must pass mypy validation

### Error Handling Standards
- NEVER use bare except clauses - always specify exception types
- ALWAYS provide contextual error messages with relevant data
- ALWAYS use custom exception classes for domain-specific errors

### Documentation Requirements
- ALL public functions must have comprehensive docstrings
- ALWAYS include Args, Returns, Raises sections in docstrings
- NEVER omit examples in docstrings for complex functions

## QUICK REFERENCE - SCRAPING REQUIREMENTS
*See `.cursor/rules/scraping-requirements.mdc` for complete details*

### Database Schema Compliance
- ALL scrapers must extract every column defined in sql/schema.sql
- QB Basic Stats: 33 columns required
- QB Splits: 34 columns required  
- QB Splits Advanced: 20 columns required
- NEVER implement partial scraping - all tables must be complete

### Rate Limiting Enforcement
- MINIMUM 7 seconds between all requests to Pro Football Reference
- MAXIMUM 100 requests per hour to PFR
- ALL requests must have 30-second timeout
- ALWAYS use exponential backoff for failed requests

## QUICK REFERENCE - WORKFLOW DOCUMENTATION
*See `.cursor/rules/workflow-documentation.mdc` for complete details*

### Mermaid Diagram Maintenance
- ALL workflow changes must be reflected in docs/scraping_workflow.md
- NEVER modify scraping logic without updating Mermaid diagrams
- NEVER commit code changes without updating relevant diagrams

## MODULAR RULES ORGANIZATION

The following sections have been moved to specialized .mdc files for better maintainability:

### üìÅ `.cursor/rules/migration-guardrails.mdc`
- Phase compliance rules and migration sequence
- Architecture compliance standards
- Migration-specific patterns and requirements
- Rule priority hierarchy

### üìÅ `.cursor/rules/scraping-requirements.mdc`
- Database schema compliance (33, 34, 20 columns)
- Rate limiting enforcement (7+ second delays)
- Data completeness validation requirements
- Anti-detection requirements from docs/

### üìÅ `.cursor/rules/code-quality-standards.mdc`
- Type safety and mypy validation requirements
- Error handling and exception standards
- Documentation and docstring requirements
- Logging and performance standards

### üìÅ `.cursor/rules/performance-monitoring.mdc`
- Performance baseline management
- Alert configuration and thresholds
- CLI usage for monitoring commands
- Integration requirements

### üìÅ `.cursor/rules/workflow-documentation.mdc`
- Mermaid diagram maintenance requirements
- Database schema documentation standards
- Workflow component requirements

### üìÅ `.cursor/rules/security-standards.mdc`
- Data protection and authentication
- Web scraping security practices
- Environment-specific security requirements

### üìÅ `.cursor/rules/anti-patterns.mdc`
- Code smells and architecture violations
- Configuration and error handling anti-patterns
- Migration mistakes to avoid

## REFERENCE TO EXISTING MODULAR RULES

Most sections from the original .cursorrules have been modularized. For comprehensive guidance, reference:

### Additional Existing Rules (already modularized)
- **sql-standards.mdc** - Database schema design and query standards
- **testing-standards.mdc** - Unit testing and integration testing requirements
- **python-quality.mdc** - Python-specific quality standards and patterns
- **cli-specific.mdc** - CLI command patterns and user interface standards
- **enforcement.mdc** - Quality assurance and enforcement mechanisms
- **conflict-resolution.mdc** - Handling rule conflicts and priority resolution

## LEGACY SECTIONS (now modularized)

The following comprehensive sections have been moved to specialized .mdc files:

- **Performance Standards** ‚Üí See `performance-monitoring.mdc`
- **Security Standards** ‚Üí See `security-standards.mdc`  
- **Testing Standards** ‚Üí See `testing-standards.mdc`
- **Logging and Monitoring** ‚Üí See `performance-monitoring.mdc`

## ESSENTIAL DEVELOPMENT COMMANDS

### CLI Usage
```bash
# Professional CLI interface
nfl-qb-scraper --help
python -m src.cli.cli_main --help
```

### Testing Commands
```bash
pytest tests/                    # Run all tests  
pytest tests/ --cov=src         # Run with coverage
mypy src/                       # Type checking
```

### Code Quality Commands  
```bash
black src/ tests/               # Code formatting
flake8 src/ tests/             # Linting
```

### Performance Monitoring
```bash
nfl-qb-scraper performance live --duration 60
nfl-qb-scraper performance baseline --operation scraping_operation
```

## DIRECTORY STRUCTURE
*See `.cursor/rules/file-organization.mdc` for detailed file organization rules*

```
pfr-qb-scraper/
‚îú‚îÄ‚îÄ .cursor/rules/         # Modular rule definitions (.mdc files)
‚îú‚îÄ‚îÄ src/
‚îÇ   ‚îú‚îÄ‚îÄ cli/               # CLI command handlers  
‚îÇ   ‚îú‚îÄ‚îÄ core/              # Core business logic
‚îÇ   ‚îú‚îÄ‚îÄ operations/        # High-level operations
‚îÇ   ‚îú‚îÄ‚îÄ scrapers/          # Web scraping modules
‚îÇ   ‚îú‚îÄ‚îÄ database/          # Database operations
‚îÇ   ‚îî‚îÄ‚îÄ config/            # Configuration files
‚îú‚îÄ‚îÄ docs/                  # Documentation and guides
‚îî‚îÄ‚îÄ tests/                 # Test files
```

## COMPREHENSIVE RULE REFERENCE

All detailed rules have been modularized into `.cursor/rules/*.mdc` files. The complete rule system includes:

### Core Rule Files (New)
- `migration-guardrails.mdc` - Phase compliance and architecture
- `scraping-requirements.mdc` - Data extraction and rate limiting
- `code-quality-standards.mdc` - Type safety and documentation
- `performance-monitoring.mdc` - Performance baselines and monitoring
- `workflow-documentation.mdc` - Mermaid diagrams and documentation
- `security-standards.mdc` - Security and authentication
- `anti-patterns.mdc` - Code smells and violations to avoid

### Existing Rule Files (Previously Modularized)
- `sql-standards.mdc` - Database schema and query standards
- `testing-standards.mdc` - Unit and integration testing
- `python-quality.mdc` - Python-specific quality standards
- `cli-specific.mdc` - CLI patterns and user interface
- `enforcement.mdc` - Quality assurance mechanisms
- `conflict-resolution.mdc` - Rule priority and conflict handling
- `field-mapping-validation.mdc` - QB splits extraction standards

## PRIORITY RULE HIERARCHY

When rules conflict, follow this priority:
1. **Security** (never compromise)
2. **Data integrity** (never compromise)  
3. **Respectful scraping** (never compromise PFR rate limits)
4. **Complete data extraction** (all required columns must be scraped)
5. **Backwards compatibility** (Phases 1-3 only)
6. **Functional correctness**
7. **Performance**
8. **Code quality**

## DEVELOPMENT WORKFLOW

**Always reference the appropriate .mdc file for detailed guidance on your specific task.**

For questions on rule interpretation or conflicts, see `.cursor/rules/conflict-resolution.mdc`.

The goal: Transform scattered scripts into a professional, maintainable CLI tool while preserving all existing functionality and maintaining the highest code quality standards.